{"version":3,"sources":["BaseApi/index.tsx","ConstData/ConstString.tsx","Stores/GameDataState.tsx","ConstData/ConstSymbol.tsx","Stores/BoardState.tsx","Stores/index.tsx","Components/BoardComponent/Api/index.tsx","Components/BoardComponent/AddOn/PaintedBoard/AddOn/Vector.tsx","Components/BoardComponent/AddOn/PaintedBoard/AddOn/Particle.tsx","Components/BoardComponent/AddOn/PaintedBoard/index.tsx","Components/BoardComponent/AddOn/NotPaintedBoard/index.tsx","Components/BoardComponent/index.tsx","Components/PanelComponent/index.tsx","Components/ButtonComponent/index.tsx","Components/FooterComponent/index.tsx","Modal/MessageModal/index.tsx","ConstData/ConstNumber.tsx","Pages/MainPage.tsx","App.tsx","index.tsx"],"names":["makeRandomNumber","number","Math","round","random","STR_COLOR_PALETTE_ARRAY_DATA","GameDataState","rootState","this","observable","action","m_currCost","m_maxCost","m_totalTime","m_currTime","m_timeSpeed","m_colorArray","m_colorPalette","length","m_currColor","m_nextColor","temp_filteredColorArray","concat","filter","_","i","indexOf","timer","setInterval","clearInterval","console","log","m_isGameOver","boardState","resetBoard","generateGameData","generateBoard","boardData","m_boardData","score","forEach","board","isPainted","m_score","SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_RIGHT","Symbol","SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_LEFT","SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_TOP","SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_BOTTOM","BoardState","boardSize","wayPointSize","gameDataState","generateColorArray","generateBackgroundColor","m_boardSize","boradData","j","push","index","x","y","wayPoint","backgroundColor","renderingNum","wayPointIndex","m_wayPointData","firstColor","b","w","paintWaypointBoard","calculateScore","nextColor","map","prevWayPoint","sqrtedBoardSize","deleteWaypointBoard","waypointOffset","_paintOrDeleteWaypoinBoard","currStack","stack","offset","prevOffset","passedOffsetArray","firstLoop","pop","neededDataForCheck","_isCheckPassedOffset","direction","comparedOffset","index_p","RootStore","makeDumyIndexArray","Array","from","Vector","setX","value","getX","setY","getY","setAngle","angle","getLength","cos","sin","getAngle","atan2","setLength","sqrt","add","v2","create","subtract","multiply","val","divide","addTo","subtractFrom","multiplyBy","divideBy","Particle","speed","grav","position","velocity","gravity","accelerate","accel","update","PaintedBoard","inject","observer","context","canvas","width","height","particlesArray","numParticles","requestArray","requestId","state","prevRenderingNum","drawWayPoint","beginPath","arc","PI","fill","renderLoop","draw","clearRect","particle","window","cancelAnimationFrame","r","g","fillStyle","requestAnimationFrame","prevProp","nextState","props","prop_data","innerBoard","setState","refs","getContext","wayPointString","ref","id","className","style","React","Component","color","BoardComponent","boardRowArray","currentBoardRow","currentBoardFirstIndex","currentBoardLastIndex","ret_boardRowArray","slice","mapBoardRowArray","boardSizeRange","index_i","key","index_j","borderString","prop_data2","NotPaintedBoard","PanelComponent","currColor","currCost","maxCost","marginBottom","display","flexDirection","justifyContent","marginLeft","fontSize","ButtonComponent","_commonFunc","consumeCost","paintBoard","resetRandomWaypoint","changeCurrNextColor","changeNextColor","onClick","FooterComponent","onClickButton","location","href","MessageModal","onClickClose","_onClick","onClickConfirm","resetGame","prop_messageText","prop_subMessageText","top","right","MainPage","isGameOver","App","stores","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24a67799.chunk.js","sourcesContent":["const makeRandomNumber = (number) => {\r\n    return Math.round(Math.random() * (number - 1));\r\n}\r\n\r\nexport { makeRandomNumber }","const STR_COLOR_PALETTE_ARRAY_DATA = [\r\n    [\"#0C0730\", \"#392E50\", \"#F6E7B0\", \"#817078\", \"#6E5261\"],\r\n    [\"#D3E9FF\", \"#FFD5D5\", \"#FFA0AD\", \"#509BE1\", \"#FF71B2\"],\r\n    [\"#F0F0F0\", \"#C6E170\", \"#92C46D\", \"#297D7D\", \"#1C344E\"],\r\n    [\"#5433FF\", \"#4379FF\", \"#1CC6FF\", \"#97FBD1\", \"#F6A4EC\"],\r\n    [\"#6c3064\", \"#c44db5\", \"#d27cd4\", \"#c6a7e4\", \"#bbc8ef\"],\r\n    [\"#fe9c8f\", \"#feb2a8\", \"#fec8c1\", \"#fad9c1\", \"#fad9c1\"],\r\n    [\"#5b1647\", \"#93073e\", \"#c90035\", \"#ff5627\", \"#ffc400\"]\r\n];\r\nconst STR_CANCEL = `X`;\r\nconst STR_NULL = ``;\r\nconst STR_CONFIRM = `확인`;\r\nexport { STR_NULL, STR_COLOR_PALETTE_ARRAY_DATA, STR_CANCEL, STR_CONFIRM }","import RootStore from './index';\r\nimport {observable, computed, action, decorate} from 'mobx';\r\n\r\nimport { makeRandomNumber } from '../BaseApi';\r\nimport { STR_COLOR_PALETTE_ARRAY_DATA } from '../ConstData/ConstString';\r\n\r\nclass GameDataState {\r\n    @observable public m_isGameOver: boolean;\r\n\r\n    @observable public m_score: number;\r\n\r\n    @observable public m_currCost: number;\r\n    @observable public m_maxCost: number;\r\n\r\n    @observable public m_currColor: string;\r\n    @observable public m_nextColor: string;\r\n\r\n    @observable public m_currTime: number;\r\n    @observable public m_totalTime: number;\r\n\r\n    @observable private m_colorArray: Array<string>;\r\n    @observable private m_colorPalette: Array<Array<string>> = STR_COLOR_PALETTE_ARRAY_DATA;\r\n\r\n    @observable private m_timeSpeed: number;\r\n\r\n    @observable private rootState: RootStore;\r\n    \r\n    constructor(rootState) {\r\n        this.rootState = rootState;\r\n    }\r\n\r\n    @action\r\n    public generateGameData = (): void => {\r\n        this.m_currCost = 0;\r\n        this.m_maxCost = 15;\r\n        this.m_totalTime = this.m_currTime = 30;\r\n        this.m_timeSpeed = 1000;\r\n    }\r\n\r\n    @action\r\n    public generateColorArray = (): Array<string> => {\r\n        \r\n        this.m_colorArray =  this.m_colorPalette[makeRandomNumber(this.m_colorPalette.length)];\r\n        return this.m_colorArray\r\n    }\r\n\r\n    @action\r\n    public generateBackgroundColor = (): string => {\r\n        this.m_currColor = this.m_colorArray[makeRandomNumber(this.m_colorArray.length)];\r\n        this.m_nextColor = this.m_colorArray[makeRandomNumber(this.m_colorArray.length)];\r\n        return this.m_currColor;\r\n    }\r\n\r\n    @action\r\n    public changeNextColor = (): void => {\r\n        const temp_filteredColorArray = this.m_colorArray.concat().filter((_,i) => {\r\n            if(this.m_colorArray.indexOf(this.m_nextColor) == i){\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        this.m_nextColor = temp_filteredColorArray[makeRandomNumber(temp_filteredColorArray.length)];\r\n    }\r\n\r\n    @action\r\n    public changeCurrNextColor = (): void => {\r\n        this.m_currColor  = this.m_nextColor; \r\n        this.m_nextColor = this.m_colorArray[makeRandomNumber(this.m_colorArray.length)];\r\n    }\r\n\r\n    @action\r\n    public setTimer = (): void => {\r\n        \r\n    }\r\n\r\n    @action\r\n    public startTimer = (): void =>  {\r\n        const timer = setInterval(()=>{\r\n            if(this.m_currTime == 0){\r\n                clearInterval(timer);\r\n                console.log(\"시간이 다 되어서 게임이 종료\");\r\n                return;\r\n            }\r\n\r\n            this.m_currTime --;\r\n        }, this.m_timeSpeed);\r\n    }\r\n\r\n    @action\r\n    public consumeCost = (): void => {\r\n        if(++this.m_currCost >= this.m_maxCost){\r\n            this.m_isGameOver = true;\r\n            return;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public resetGame = (): void => {\r\n        this.rootState.boardState.resetBoard();\r\n\r\n        this.generateGameData();\r\n        this.rootState.boardState.generateBoard(10,1);\r\n        // this.startTimer();\r\n        this.m_isGameOver = false;\r\n    }\r\n\r\n    @action\r\n    public calculateScore = (): void => {\r\n        const { m_boardData: boardData } = this.rootState.boardState;\r\n        let score = 0;\r\n        boardData.forEach(board => {\r\n            if(board.isPainted == true){\r\n                score += 10;\r\n            }\r\n        });\r\n        this.m_score = score;\r\n    }\r\n}\r\nexport default GameDataState;","const SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_RIGHT = Symbol();\r\nconst SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_LEFT = Symbol();\r\nconst SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_TOP = Symbol();\r\nconst SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_BOTTOM = Symbol();\r\n\r\nconst SYMBOL_CALCULATE_DIRECTION_RIGHT = Symbol();\r\nconst SYMBOL_CALCULATE_DIRECTION_LEFT = Symbol();\r\nconst SYMBOL_CALCULATE_DIRECTION_TOP = Symbol();\r\nconst SYMBOL_CALCULATE_DIRECTION_BOTTOM = Symbol();\r\n// calculateDirection\r\n\r\nexport { SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_RIGHT, SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_LEFT,\r\n         SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_TOP, SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_BOTTOM,\r\n        \r\n         SYMBOL_CALCULATE_DIRECTION_RIGHT, SYMBOL_CALCULATE_DIRECTION_LEFT,\r\n         SYMBOL_CALCULATE_DIRECTION_TOP, SYMBOL_CALCULATE_DIRECTION_BOTTOM }","import RootStore from './index';\r\nimport {observable, action} from 'mobx';\r\n\r\nimport { makeRandomNumber } from '../BaseApi';\r\n\r\nimport { SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_RIGHT, SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_LEFT, \r\n         SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_TOP, SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_BOTTOM } \r\n         from '../ConstData/ConstSymbol';\r\n\r\n\r\nclass BoardState {\r\n\r\n    @observable private m_wayPointData: Array<number> = [];\r\n\r\n    @observable public m_boardSize: number = 0;\r\n    @observable public m_boardData: Array<any> = [];\r\n\r\n    @observable private m_colorArray: Array<string> = [];\r\n\r\n    @observable private rootState:RootStore;\r\n    \r\n    constructor(rootState) {\r\n        this.rootState = rootState;\r\n    }\r\n\r\n    @action\r\n    public generateBoard:(boardSize: number, wayPointSize: number) => Array<any> = (boardSize, wayPointSize) => {\r\n\r\n        const { generateColorArray,\r\n                generateBackgroundColor } = this.rootState.gameDataState;\r\n    \r\n        this.m_colorArray = generateColorArray();\r\n        this.m_boardSize = boardSize;\r\n\r\n\r\n        const boradData = [];\r\n        region_generateBoardData:\r\n        {\r\n            for(let i = 0; i < boardSize ; i++) {\r\n                for(let j = 0; j < boardSize ; j++) {\r\n                    boradData.push({\r\n                        index: i * this.m_boardSize + j,\r\n                        x: j,\r\n                        y: i,\r\n                        isPainted: false,\r\n                        wayPoint: false,\r\n                        backgroundColor: this.m_colorArray[makeRandomNumber(this.m_colorArray.length)],\r\n                        renderingNum: 0\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        this.m_boardData = boradData;\r\n\r\n        region_generateWayPoint:\r\n        {\r\n            while(wayPointSize-- != 0){\r\n                const sqrtedBoardSize = boardSize * boardSize\r\n                const wayPointIndex = makeRandomNumber(sqrtedBoardSize);\r\n                this.m_wayPointData.push(wayPointIndex);\r\n     \r\n                this.m_boardData[wayPointIndex].wayPoint = true;\r\n                this.m_boardData[wayPointIndex].isPainted = true;\r\n            }\r\n        }\r\n\r\n        region_firstPaintBoard:\r\n        {\r\n            const firstColor = generateBackgroundColor();\r\n            this.m_boardData.forEach(b => {\r\n                if(b.isPainted == true){\r\n                    b.backgroundColor = firstColor;\r\n                }\r\n            });\r\n    \r\n            this.m_wayPointData.forEach(w => {\r\n                this.paintWaypointBoard(w);\r\n            });\r\n\r\n            const { calculateScore } = this.rootState.gameDataState;\r\n            calculateScore();\r\n        }\r\n\r\n        return this.m_boardData;\r\n    }\r\n\r\n    @action\r\n    public paintBoard = (): void => {\r\n        const { m_nextColor: nextColor } = this.rootState.gameDataState;\r\n\r\n        this.m_boardData.forEach(board => {\r\n            if(board.isPainted == true){\r\n                board.backgroundColor = nextColor;\r\n                board.renderingNum += 1;\r\n            }\r\n        });\r\n\r\n        this.m_wayPointData.forEach(wayPoint => {\r\n            this.paintWaypointBoard(wayPoint);\r\n        });\r\n\r\n        const { calculateScore } = this.rootState.gameDataState;\r\n        calculateScore();\r\n    }\r\n\r\n    @action\r\n    public resetRandomWaypoint = (): void =>  {\r\n        this.m_wayPointData = this.m_wayPointData.map(prevWayPoint => {\r\n            const sqrtedBoardSize = this.m_boardSize * this.m_boardSize;\r\n            const wayPointIndex = makeRandomNumber(sqrtedBoardSize);\r\n\r\n            this.m_boardData[prevWayPoint].wayPoint = false;\r\n            this.m_boardData[prevWayPoint].isPainted = false;\r\n            this.deleteWaypointBoard(prevWayPoint);\r\n\r\n            this.m_boardData[wayPointIndex].wayPoint = true;\r\n            this.m_boardData[wayPointIndex].isPainted = true;\r\n            this.paintWaypointBoard(wayPointIndex);\r\n\r\n            return wayPointIndex;\r\n        });\r\n    }\r\n\r\n    @action\r\n    public resetBoard = (): void => {\r\n        this.m_wayPointData = [];\r\n\r\n        this.m_boardSize = 0;\r\n        this.m_boardData= [];\r\n    \r\n        this.m_colorArray = [];\r\n    }\r\n\r\n    @action\r\n    private paintWaypointBoard = (waypointOffset: number): void =>  {\r\n        this._paintOrDeleteWaypoinBoard(waypointOffset, true);\r\n    }\r\n\r\n    @action\r\n    private deleteWaypointBoard = (waypointOffset: number): void => {\r\n        this._paintOrDeleteWaypoinBoard(waypointOffset, false);\r\n    }   \r\n\r\n    @action\r\n    private _paintOrDeleteWaypoinBoard = (waypointOffset: number, isPainted: boolean): void => {\r\n        let firstOffset: number = waypointOffset;\r\n        const stack: Array<any> = [{offset: firstOffset, prevOffset: null}];\r\n        const passedOffsetArray: Array<any> = [];\r\n\r\n        let currStack;\r\n        firstLoop:\r\n        while(currStack = stack.pop()){\r\n            const { offset, _ } = currStack;\r\n\r\n            const neededDataForCheck = {\r\n                passedOffsetArray,\r\n                stack,\r\n                currStack,\r\n                isPainted\r\n            }\r\n            // 보드 데이터가 지나왔던 길인지 아닌지 탐색\r\n            // 오른쪽 boardData와 비교\r\n            if(this.m_boardData[offset].x < (this.m_boardSize - 1)\r\n                && this.m_boardData[offset].backgroundColor == this.m_boardData[offset + 1].backgroundColor\r\n                && this.m_boardData[offset].x + 1 == this.m_boardData[offset + 1].x\r\n                && this.m_boardData[offset].y == this.m_boardData[offset + 1].y){\r\n                     \r\n                const isChecked = this._isCheckPassedOffset(SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_RIGHT, \r\n                                                            offset, neededDataForCheck);\r\n                if(isChecked){\r\n                    continue firstLoop;\r\n                }\r\n            }\r\n            // 왼쪽 boardData와 비교\r\n            if(this.m_boardData[offset].x > 0 \r\n                && this.m_boardData[offset].backgroundColor == this.m_boardData[offset - 1].backgroundColor\r\n                && this.m_boardData[offset].x - 1 == this.m_boardData[offset - 1].x\r\n                && this.m_boardData[offset].y == this.m_boardData[offset - 1].y){\r\n\r\n                const isChecked = this._isCheckPassedOffset(SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_LEFT, \r\n                                                            offset, neededDataForCheck);\r\n                if(isChecked){\r\n                     continue firstLoop;\r\n                }\r\n            }\r\n            // 위쪽 boardData와 비교\r\n            if(this.m_boardData[offset].y > 0 \r\n                && this.m_boardData[offset].backgroundColor == this.m_boardData[offset - this.m_boardSize].backgroundColor\r\n                && this.m_boardData[offset].y - 1 == this.m_boardData[offset - this.m_boardSize].y\r\n                && this.m_boardData[offset].x == this.m_boardData[offset - this.m_boardSize].x){\r\n\r\n                const isChecked = this._isCheckPassedOffset(SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_TOP, \r\n                                                            offset, neededDataForCheck);\r\n                if(isChecked){\r\n                    continue firstLoop;\r\n                }\r\n            }\r\n            // 아래쪽 boardData와 비교\r\n            if(this.m_boardData[offset].y < (this.m_boardSize -1)\r\n                && this.m_boardData[offset].backgroundColor == this.m_boardData[offset + this.m_boardSize].backgroundColor\r\n                && this.m_boardData[offset].y + 1 == this.m_boardData[offset + this.m_boardSize].y\r\n                && this.m_boardData[offset].x == this.m_boardData[offset + this.m_boardSize].x){\r\n\r\n                const isChecked = this._isCheckPassedOffset(SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_BOTTOM, \r\n                                                            offset, neededDataForCheck);\r\n                if(isChecked){\r\n                     continue firstLoop;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @action\r\n    private _isCheckPassedOffset = (direction: symbol, offset: number , neededDataForCheck): boolean => {\r\n        const { stack, passedOffsetArray, currStack, isPainted } = neededDataForCheck;\r\n\r\n        let comparedOffset: number;\r\n        switch(direction){\r\n            case SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_RIGHT:\r\n                comparedOffset = offset + 1;\r\n                break;\r\n            case SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_LEFT:\r\n                comparedOffset = offset - 1;\r\n                break;\r\n            case SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_TOP:\r\n                comparedOffset = offset - this.m_boardSize;\r\n                break;\r\n            case SYMBOL_ISCHECK_PASSED_OFFSET_DIRECTION_BOTTOM:\r\n                comparedOffset = offset + this.m_boardSize;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let index_p: number = passedOffsetArray.length;\r\n        while(index_p-- != 0){\r\n            if(passedOffsetArray[index_p].offset == comparedOffset \r\n                && passedOffsetArray[index_p].prevOffset == offset){\r\n                return true;\r\n            }\r\n        }\r\n\r\n        passedOffsetArray.push(currStack);\r\n        stack.push({ offset: comparedOffset, \r\n                     prevOffset: offset });\r\n\r\n        this.m_boardData[comparedOffset].isPainted = isPainted;\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default BoardState;","import {observable} from 'mobx';\r\nimport GameDataState from './GameDataState';\r\nimport BoardState from './BoardState';\r\n\r\nclass RootStore {\r\n    @observable boardState:BoardState;\r\n    @observable gameDataState:GameDataState;\r\n    constructor(){\r\n        this.gameDataState = new GameDataState(this);\r\n        this.boardState = new BoardState(this);\r\n    }\r\n}\r\nexport default RootStore;\r\nexport { BoardState, GameDataState }","import { SYMBOL_CALCULATE_DIRECTION_TOP, SYMBOL_CALCULATE_DIRECTION_RIGHT, \r\n         SYMBOL_CALCULATE_DIRECTION_BOTTOM, SYMBOL_CALCULATE_DIRECTION_LEFT } from \"../../../ConstData\";\r\n\r\nconst makeDumyIndexArray = (length) => {\r\n    return Array.from({ length }, (_, i) => 0 + i);\r\n}\r\n\r\nconst mapBoardRowArray = (boardData, boardSize) => {\r\n\r\n    let currentBoardFirstIndex = 0;\r\n    let currentBoardLastIndex = boardSize;\r\n    let currentBoardRow;\r\n\r\n    const ret_boardRowArray = [];\r\n\r\n    makeDumyIndexArray(boardSize).forEach(_ => {\r\n        currentBoardRow = boardData.slice(currentBoardFirstIndex, currentBoardLastIndex);\r\n\r\n        currentBoardFirstIndex += boardSize;\r\n        currentBoardLastIndex += boardSize;\r\n\r\n        ret_boardRowArray.push(currentBoardRow);\r\n    });\r\n\r\n    return ret_boardRowArray;\r\n}\r\n\r\nconst calculateDirection = (innerBoard, boardSize, boardData, borderString: string, direactionSymbol: symbol): string => {\r\n    switch(direactionSymbol){\r\n        case SYMBOL_CALCULATE_DIRECTION_TOP:\r\n            if(innerBoard.index > boardSize-1\r\n                    && boardData[innerBoard.index].x == boardData[innerBoard.index - boardSize].x\r\n                    && boardData[innerBoard.index].isPainted != boardData[innerBoard.index - boardSize].isPainted\r\n                    && boardData[innerBoard.index].backgroundColor != boardData[innerBoard.index - boardSize].backgroundColor){\r\n                return borderString;\r\n            } else {\r\n                return '';\r\n            }\r\n        case SYMBOL_CALCULATE_DIRECTION_RIGHT:\r\n            if((innerBoard.index - (boardSize - 1)) % boardSize != 0 \r\n                && boardData[innerBoard.index].y == boardData[innerBoard.index + 1].y\r\n                && boardData[innerBoard.index].isPainted != boardData[innerBoard.index + 1].isPainted\r\n                && boardData[innerBoard.index].backgroundColor != boardData[innerBoard.index + 1].backgroundColor){\r\n                return borderString;\r\n            } else {\r\n                return '';\r\n            }\r\n        case SYMBOL_CALCULATE_DIRECTION_BOTTOM:\r\n            if(innerBoard.index < (boardSize * boardSize) - boardSize\r\n                && boardData[innerBoard.index].x == boardData[innerBoard.index + boardSize].x\r\n                && boardData[innerBoard.index].isPainted != boardData[innerBoard.index + boardSize].isPainted\r\n                && boardData[innerBoard.index].backgroundColor != boardData[innerBoard.index + boardSize].backgroundColor){\r\n                return borderString;\r\n            } else {\r\n                return '';\r\n            }\r\n        case SYMBOL_CALCULATE_DIRECTION_LEFT:\r\n            if(innerBoard.index % boardSize != 0 \r\n                    && boardData[innerBoard.index].y == boardData[innerBoard.index - 1].y\r\n                    && boardData[innerBoard.index].isPainted != boardData[innerBoard.index - 1].isPainted\r\n                    && boardData[innerBoard.index].backgroundColor != boardData[innerBoard.index - 1].backgroundColor){\r\n                return borderString;\r\n            } else {\r\n                return '';\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport { makeDumyIndexArray, mapBoardRowArray, calculateDirection }","const Vector = class {\r\n    x = 1;\r\n    y = 2;\r\n    static create = (x,y) => {\r\n        return new Vector(x,y);\r\n    }\r\n    constructor(x,y){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    setX = (value) => {\r\n        this.x = value;\r\n    }\r\n    getX = () => {\r\n        return this.x;\r\n    }\r\n    setY = (value) => {\r\n        this.y = value;\r\n    }\r\n    getY = () => {\r\n        return this.y;\r\n    }\r\n\r\n\tsetAngle = (angle) => {\r\n\t\tconst length = this.getLength();\r\n\t\tthis.x = Math.cos(angle) * length;\r\n\t\tthis.y = Math.sin(angle) * length;\r\n\t}\r\n\r\n\tgetAngle = () => {\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\r\n\tsetLength =(length) => {\r\n\t\tconst angle = this.getAngle();\r\n\t\tthis.x = Math.cos(angle) * length;\r\n\t\tthis.y = Math.sin(angle) * length;\r\n\t}\r\n\r\n\tgetLength = () => {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\r\n\t}\r\n\r\n\tadd = (v2) => {\r\n\t\treturn Vector.create(this.x + v2.getX(), this.y + v2.getY());\r\n\t}\r\n\r\n\tsubtract = (v2) => {\r\n\t\treturn Vector.create(this.x - v2.getX(), this.y - v2.getY());\r\n\t}\r\n\r\n\tmultiply = (val) => {\r\n\t\treturn Vector.create(this.x * val, this.y * val);\r\n\t}\r\n\r\n\tdivide = (val) => {\r\n\t\treturn Vector.create(this.x / val, this.y / val);\r\n\t}\r\n\r\n\taddTo = (v2) => {\r\n\t\tthis.x += v2.getX();\r\n\t\tthis.y += v2.getY();\r\n\t}\r\n\r\n\tsubtractFrom = (v2) => {\r\n\t\tthis.x -= v2.getX();\r\n\t\tthis.y -= v2.getY();\r\n\t}\r\n\r\n\tmultiplyBy = (val) => {\r\n\t\tthis.x *= val;\r\n\t\tthis.y *= val;\r\n\t}\r\n\r\n\tdivideBy = (val) => {\r\n\t\tthis.x /= val;\r\n\t\tthis.y /= val;\r\n    }\r\n}\r\n\r\nexport default Vector;","import Vector from './Vector';\r\n\r\nclass Particle {\r\n    position = null;\r\n    velocity = null;\r\n    gravity = null;\r\n\r\n    static create = (x, y, speed, direction, grav) => {\r\n        return new Particle(x, y, speed, direction, grav); \r\n    }\r\n    constructor(x, y, speed, direction, grav){\r\n        this.position = Vector.create(x,y); \r\n        this.velocity = Vector.create(0,0); \r\n        this.velocity.setLength(speed);\r\n        this.velocity.setAngle(direction);\r\n        this.gravity = Vector.create(0, grav || 0);\r\n    }\r\n    \r\n\taccelerate = (accel) => {\r\n\t\tthis.velocity.addTo(accel);\r\n\t}\r\n\r\n\tupdate = () => {\r\n\t\tthis.velocity.addTo(this.gravity);\r\n\t\tthis.position.addTo(this.velocity);\r\n\t}\r\n}\r\n\r\nexport default Particle;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Particle from './AddOn/Particle';\r\n\r\nimport BoardState from '../../../../Stores/BoardState';\r\nimport GameDataState from '../../../../Stores/GameDataState';\r\nimport { makeRandomNumber } from '../../../../BaseApi';\r\nimport './index.css';\r\n\r\n@inject(({boardState, gameDataState}) => ({\r\n    boardState, gameDataState\r\n})) \r\n@observer\r\nclass PaintedBoard extends React.Component<{ prop_data,\r\n                                             gameDataState?: GameDataState\r\n                                             boardState?: BoardState }> {\r\n    context;                      \r\n    canvas;\r\n    width;\r\n    height;                                                 \r\n    particlesArray = [];\r\n    numParticles = 10;   \r\n    requestArray = [];\r\n\r\n    requestId = 0;\r\n\r\n    state = {\r\n        prevRenderingNum : 0\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProp, nextState){\r\n        if(this.props.gameDataState.m_isGameOver == true){\r\n            return false;\r\n        }\r\n        if(this.props.prop_data.innerBoard.renderingNum == 0){\r\n            return false;\r\n        }\r\n\r\n        if(this.state.prevRenderingNum != this.props.prop_data.innerBoard.renderingNum){\r\n            return true;\r\n        } else {\r\n            this.setState({\r\n                prevRenderingNum:this.props.prop_data.innerBoard.renderingNum\r\n            });\r\n            return false;\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.canvas = this.refs.canvas;\r\n        this.context = this.canvas.getContext('2d');\r\n        this.width = this.canvas.width = 70\r\n        this.height = this.canvas.height = 70;\r\n        \r\n        const { wayPointString } = this.props.prop_data;\r\n        if(wayPointString == true){\r\n            this.drawWayPoint();\r\n            return;\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        this.canvas = this.refs.canvas;\r\n        this.context = this.canvas.getContext('2d');\r\n        this.width = this.canvas.width = 70\r\n        this.height = this.canvas.height = 70;\r\n        \r\n        const { wayPointString } = this.props.prop_data;\r\n        if(wayPointString == true){\r\n            this.drawWayPoint();\r\n            return;\r\n        }\r\n\r\n        for(let i = 0; i < this.numParticles; i += 1) {\r\n            this.particlesArray.push(Particle.create(this.width / 2, this.height / 3, \r\n                                                Math.random() * 5 , Math.random() * Math.PI * 2, 0.1));\r\n        }\r\n        this.renderLoop();\r\n    }\r\n    drawWayPoint = () => {\r\n        this.context.beginPath();\r\n        this.context.arc(this.width / 2, this.height / 2, 10, 0, 2 * Math.PI);\r\n        this.context.fill();\r\n    }\r\n    renderLoop = () => {\r\n        this.draw();\r\n    }\r\n    draw = () => {\r\n        this.context.clearRect(0, 0, this.width, this.height);\r\n\r\n        for(let i =  0; i < this.numParticles; i += 1) {\r\n            const particle = this.particlesArray[i];\r\n            if(!particle){\r\n                continue;\r\n            }\r\n            particle.update();\r\n\r\n            if(particle.position.getY() > 100){\r\n                window.cancelAnimationFrame(this.requestId);\r\n                this.context.clearRect(0, 0, this.width, this.height);\r\n\r\n                this.particlesArray = [];\r\n                // let length = this.particles.length;\r\n                // while(length--){\r\n                //     this.particles.pop();\r\n                // }\r\n                return true;\r\n            }\r\n\r\n            this.context.beginPath();\r\n            this.context.arc(particle.position.getX(), particle.position.getY(), 4, 0, Math.PI * 2, false);\r\n            const r = makeRandomNumber(255);\r\n            const g = makeRandomNumber(255);\r\n            const b = makeRandomNumber(255);\r\n            this.context.fillStyle = 'rgb(' + r + ', ' +  g + ', ' + b +')';\r\n            this.context.fill();\r\n        }\r\n        this.requestId = window.requestAnimationFrame(this.draw);\r\n    }\r\n    render(){\r\n        const { innerBoard, wayPointString } = this.props.prop_data;\r\n        // console.log(\"wayPointString\",wayPointString);\r\n        return (\r\n            <canvas \r\n                ref=\"canvas\" \r\n                id=\"canvas\"\r\n                className=\"innerBoard isPainted\" \r\n                style={{backgroundColor:innerBoard.backgroundColor}}>\r\n                    <div>p</div>\r\n            </canvas>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PaintedBoard;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport BoardState from \"../../../../Stores/BoardState\";\r\n\r\n@inject(({boardState}) => ({\r\n    boardState,\r\n})) \r\n\r\n@observer\r\nclass PaintedBoard extends React.Component<{ prop_data,\r\n                                             boardState?: BoardState }> {\r\n    \r\n    render(){\r\n        const { innerBoard,wayPointString } = this.props.prop_data;\r\n        return (\r\n            <canvas \r\n                className=\"innerBoard\" \r\n                style={{backgroundColor: innerBoard.backgroundColor, \r\n                color: \"white\" }}>\r\n                { wayPointString }\r\n           </canvas>\r\n        )     \r\n    }\r\n}\r\n\r\nexport default PaintedBoard;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport BoardState from '../../Stores/BoardState';\r\n\r\nimport { mapBoardRowArray, makeDumyIndexArray } from './Api';\r\n\r\nimport { PaintedBoard, NotPaintedBoard } from './AddOn';\r\n\r\nimport './index.css';\r\n\r\n@inject(({boardState}) => ({\r\n    boardState,\r\n}))\r\n\r\n@observer\r\nclass BoardComponent extends React.Component<{ boardState?: BoardState }> {\r\n    render(){\r\n        const { m_boardSize: boardSize,\r\n                m_boardData: boardData } = this.props.boardState;\r\n\r\n        const boardRowArray = mapBoardRowArray(boardData, boardSize);\r\n        const boardSizeRange = makeDumyIndexArray(boardSize);\r\n  \r\n        return (\r\n            <div>\r\n                <div className=\"main\">\r\n                    {\r\n                        boardSizeRange.map((_,index_i) => {\r\n                            return (\r\n                                <div key={index_i} className=\"outerBoard\">\r\n                                {  \r\n                                    boardRowArray[index_i].map((innerBoard, index_j) => {\r\n                                        const wayPointString = innerBoard.wayPoint ? true : false;\r\n                                        const borderString = \"1px solid white\";\r\n\r\n                                        const prop_data = {\r\n                                            innerBoard,\r\n                                            boardSize,\r\n                                            boardData,\r\n                                            borderString,\r\n                                            wayPointString\r\n                                        }\r\n                                        const prop_data2 = {\r\n                                            innerBoard,\r\n                                            wayPointString\r\n                                        }\r\n                                        if(innerBoard.isPainted === true) {\r\n                                            return <PaintedBoard key={index_j} prop_data={prop_data}/>\r\n                                        } else {\r\n                                            return <NotPaintedBoard key={index_j} prop_data={prop_data2}/>\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                           )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BoardComponent;\r\n","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport BoardState from '../../Stores/BoardState';\r\nimport GameDataState from '../../Stores/GameDataState';\r\n\r\nimport './index.css';\r\n\r\n@inject(({boardState, gameDataState}) => ({\r\n    boardState,\r\n    gameDataState\r\n}))\r\n\r\n@observer\r\nclass PanelComponent extends React.Component<{ boardState?: BoardState, gameDataState?: GameDataState }> {\r\n    render(){\r\n        const { m_currColor: currColor,\r\n                m_nextColor: nextColor,\r\n\r\n                m_currTime: currTime, \r\n                \r\n                m_currCost: currCost,\r\n                m_maxCost: maxCost,\r\n            \r\n                m_score: score} = this.props.gameDataState;\r\n\r\n        return <div style={{marginBottom:'1rem'}}> \r\n                    {/* <div style={{display:\"flex\", flexDirection: \"row\", justifyContent:\"center\"}}>\r\n                        Time {currTime}\r\n                    </div> */}\r\n                    <div style={{display:\"flex\", flexDirection: \"row\", justifyContent:\"center\"}}>\r\n                        <div>\r\n                            <span>Score</span> \r\n                            <span className=\"emphasizedColor\" \r\n                                style={{marginLeft:\"0.5rem\"}}>{score}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{display:\"flex\", flexDirection: \"row\", justifyContent:\"space-between\",\r\n                                fontSize:\"18px\"}}>\r\n                        <div>\r\n                            <span>Cost</span> \r\n                            <span className=\"emphasizedColor\"\r\n                                  style={{marginLeft:\"0.5rem\"}}>{currCost} / {maxCost}\r\n                             </span>\r\n                        </div>\r\n                        <div>\r\n                            Current Color\r\n                            <div style={{backgroundColor: currColor}}>\r\n                                {currColor}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            Next Color\r\n                            <div style={{backgroundColor: nextColor}}>\r\n                                {nextColor}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default PanelComponent;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport BoardState from '../../Stores/BoardState';\r\nimport GameDataState from '../../Stores/GameDataState';\r\n\r\nimport './index.css';\r\n\r\n@inject(({boardState, gameDataState}) => ({\r\n    boardState,\r\n    gameDataState\r\n}))\r\n\r\n@observer\r\nclass ButtonComponent extends React.Component<{ boardState?: BoardState, gameDataState?: GameDataState }> {\r\n    private _commonFunc = () => {\r\n        const { m_currCost: currCost,\r\n                m_maxCost: maxCost,\r\n                consumeCost } = this.props.gameDataState;\r\n        //페인트가 안 되는 제약조건들\r\n        if(currCost >= maxCost){\r\n            return;\r\n        }\r\n        //cost소비\r\n        consumeCost();\r\n    }\r\n    render(){\r\n        const { paintBoard,\r\n                resetRandomWaypoint} = this.props.boardState;\r\n\r\n        const { changeCurrNextColor,\r\n                changeNextColor } = this.props.gameDataState;\r\n\r\n        const onClickPaintBoard = _=> {\r\n            this._commonFunc();\r\n\r\n            //paint Board\r\n            paintBoard();\r\n            //color change\r\n            changeCurrNextColor();\r\n        }\r\n        const onClickChangeNextColor = _ => {\r\n            this._commonFunc();\r\n            changeNextColor()\r\n        };\r\n        const onClickResetRandomWaypoint = _ => {\r\n            this._commonFunc();\r\n            resetRandomWaypoint();\r\n            // paintBoard();\r\n        };\r\n\r\n        return (\r\n            <div className=\"buttonComp-row\">\r\n                <button onClick={onClickPaintBoard}>Paint</button>\r\n                <button onClick={onClickChangeNextColor}>Change Color</button>\r\n                <button onClick={onClickResetRandomWaypoint}>Random Waypoint</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonComponent;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport './index.css';\r\n\r\n@inject(({boardState, gameDataState}) => ({\r\n    boardState,\r\n    gameDataState\r\n}))\r\n\r\n@observer\r\nclass FooterComponent extends React.Component<{  }> {\r\n    private onClickButton = () => {\r\n        window.location.href = `https://github.com/BitEmotion`;\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"footer\" \r\n                 onClick={this.onClickButton}>\r\n                 https://github.com/BitEmotion\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FooterComponent;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { NUM_MESSAGETEXT_MAX_LENGTH } from '../../ConstData/ConstNumber';\r\nimport { STR_CANCEL, STR_CONFIRM } from '../../ConstData/ConstString';\r\nimport GameDataState from '../../Stores/GameDataState';\r\n\r\nimport './index.css';\r\n\r\n@inject(({gameDataState}) => ({\r\n    gameDataState\r\n}))\r\n\r\n@observer\r\nclass MessageModal extends React.Component<{ gameDataState?: GameDataState}> {\r\n    private onClickClose = () => {\r\n        this._onClick();\r\n    }\r\n    \r\n    private onClickConfirm = () => {\r\n        this._onClick();\r\n    }\r\n\r\n    private _onClick = () => {\r\n        const { resetGame} = this.props.gameDataState;\r\n        resetGame();\r\n    }\r\n\r\n    render(){\r\n        // const { messageText: prop_messageText,\r\n        //         subMessageText: prop_subMessageText } =  this.props.prop_data;\r\n        const { m_score: score } = this.props.gameDataState;\r\n        const prop_messageModalData = {\r\n            messageText: ` 게임이 종료되었습니다`,\r\n            subMessageText: ` 최종점수는 ` \r\n        }\r\n        const { messageText: prop_messageText, \r\n                subMessageText: prop_subMessageText } = prop_messageModalData\r\n        return (\r\n            <div className=\"messageModal\">\r\n                <div className=\"messageModal-fragment mainBackColor\">\r\n                    <div className={ prop_messageText.length > NUM_MESSAGETEXT_MAX_LENGTH \r\n                            ? \"messageModal-inner fontSize18px\" \r\n                            : \"messageModal-inner\"} >\r\n                            { prop_messageText }\r\n                        <div>\r\n                             {prop_subMessageText } {score} 입니다\r\n                        </div>\r\n                        <span className=\"containerModal-cancel\" onClick = {this.onClickClose} \r\n                              style={{position:\"absolute\", top:-25, right:0}}>\r\n                            { STR_CANCEL }\r\n                        </span>\r\n                        <div>\r\n                            <button className=\"commonButton\" onClick = {this.onClickConfirm} >\r\n                                { STR_CONFIRM }\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageModal;","const NUM_MESSAGETEXT_MAX_LENGTH = 22;\r\n\r\nexport { NUM_MESSAGETEXT_MAX_LENGTH } ","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport GameDataState from '../Stores/GameDataState';\r\n\r\nimport BoardComponent from '../Components/BoardComponent';\r\nimport PanelComponent from '../Components/PanelComponent';\r\nimport ButtonComponent from '../Components/ButtonComponent';\r\nimport FooterComponent from '../Components/FooterComponent';\r\nimport MessageModal from '../Modal/MessageModal';\r\n\r\n@inject(({gameDataState}) => ({\r\n    gameDataState\r\n}))\r\n\r\n@observer\r\nclass MainPage extends React.Component<{ gameDataState? : GameDataState }> {\r\n    render(){\r\n        const { m_isGameOver: isGameOver } = this.props.gameDataState;\r\n        return (\r\n            <>\r\n                {\r\n                    isGameOver == true\r\n                        ? <MessageModal/>\r\n                        : null\r\n                }\r\n                <PanelComponent/>\r\n                <BoardComponent/>\r\n                <ButtonComponent/>\r\n                <FooterComponent/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport RootStore from './Stores';\nimport MainPage from './Pages/MainPage';\n\nexport default class App extends React.Component {\n  stores = new RootStore();\n\n  UNSAFE_componentWillMount(){\n    //게임루프 시작\n    this.stores.gameDataState.generateGameData();\n    this.stores.boardState.generateBoard(10,1);\n    // this.stores.gameDataState.startTimer();\n  }\n  onClick = (e: React.FormEvent) => {\n\n  }\n  render(){\n    return (\n      <Provider {...this.stores}>\n        <MainPage/>\n      </Provider>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}